@using System.Web.Mvc
@using ChessModel
@model ChessModel.Game

@{
    var boardOrientation = User.Identity.Name == Model.WhitePlayer || User.Identity.Name != Model.BlackPlayer ? ManColor.White : ManColor.Black;
    bool frozen;
    if (Model.CurrentTurnSide == ManColor.White)
    {
        frozen = User.Identity.Name != Model.WhitePlayer;
    }
    else
    {
        if (Model.BlackPlayer == null)
        {
            frozen = User.Identity.Name != Model.WhitePlayer || Model.DarkChess;
        }
        else
        {        
            frozen = User.Identity.Name != Model.BlackPlayer;
        }
    }
    bool showWhite = User.Identity.Name == Model.WhitePlayer;
    bool showBlack = User.Identity.Name == Model.BlackPlayer;
}
<table>
    <tr>
        <td class="border"></td>
        @for (var j = 0; j < 8; ++j)
        {
            var x = Board.GetX(boardOrientation, j);
            <td class="border" align="center">@((char)('A' + x))</td>
        }
        <td class="border"></td>
    </tr>
    @{
        var lastMoves = Model.Board.LastMove.Fields;
        for (var i = 0; i < 8; ++i)
        {
            var y = Board.GetY(boardOrientation, i);        
            <tr class="board">
                <td class="border">@((char)('1' + y))</td>
                @for (var j = 0; j < 8; ++j)
                {
                    var x = Board.GetX(boardOrientation, j);
                    var man = Model.Board.Cell(x, y);
                    var cell = Board.FieldName(x, y);
                    bool visible =
                        showWhite && Model.Board.IsVisible(ManColor.White, x, y) ||
                        showBlack && Model.Board.IsVisible(ManColor.Black, x, y);
                    if (!visible)
                    {
                        <td class="square">
                            <div class="man">#</div>
                        </td>
                    }
                    else if (frozen)
                    {
                        <td class="square @(lastMoves.IndexOf(cell) != -1 ? "lastmove":"")">
                            @if (man != null)
                            {
                                <div class="man @(man.Color)">@man.BlackCharCode</div>
                            }
                        </td>
                    }
                    else
                    {
                        <td class="square @(lastMoves.IndexOf(cell) != -1 ? "lastmove":"")" id="@cell">
                            @if (man != null)
                            {
                                string moveTo = man.MoveToFields;
                                <div class="man @(man.Color) @(moveTo.IsEmpty() ? "" : "movable")" data-move-to="@moveTo">@man.BlackCharCode</div>
                            }
                        </td>
                    }
                }
                <td class="border">@((char)('1' + y))</td>
            </tr>
        }
    }
    <tr>
        <td class="border"></td>
        @for (var j = 0; j < 8; ++j)
        {
            var x = Board.GetX(boardOrientation, j);
            <td class="border" align="center">@((char)('A' + x))</td>
        }
        <td class="border"></td>
    </tr>
    @if (frozen)
    {
        <script type="text/javascript">
            var boardRefresh = true;
            var currentMovesCount = @Model.MovesCount;
        </script>
    }
    else
    {        
        <script type="text/javascript">
            var boardRefresh = false;
            makeDraggable();
        </script>
    }
</table>
